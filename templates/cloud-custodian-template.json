{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Deploys an EC2 Instance and bootstraps Cloud Custodian.  It pulls  ",
  "Parameters": {
    "DeployBucket": {
            "Description": "Bucket holding assets that get deployed by this template",
            "MinLength": "1",
            "Type": "String"
    },
    "AMZNLinux2AMI": {
      "Description": "The latest AMI ID for Amazon Linux 2",
      "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
      "Default": "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"
    },
    "InstanceSubnetId": {
            "Type": "String",
            "Description": "Id of the Subnet to launch instance into"
    },
    "DeployVPC": {
            "Type": "String",
            "Description": "Id of the VPC to launch instances into"
    }
  },
  "Resources": {
    "CloudCustodianInstanceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ssm.amazonaws.com",
                  "ec2.amazonaws.com"
                ]
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/AWSSecurityHubFullAccess",
          "arn:aws:iam::aws:policy/ReadOnlyAccess"
        ],
        "Path": "/"
      }
    },
    "CloudCustodianInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "CloudCustodianInstanceRole"
          }
        ],
      }
    },
    "CloudCustodianInstance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "ImageId": {
          "Ref": "AMZNLinux2AMI"
        },
        "InstanceType": "t3.micro",
        "SecurityGroupIds": [
          {
            "Fn::GetAtt" : ["CloudCustodianSG", "GroupId"] 
          }
        ],
        "SubnetId": {
          "Ref": "InstanceSubnetId"
        },
        "IamInstanceProfile": {
          "Ref": "CloudCustodianInstanceProfile"
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -xe\n",
                "yum upgrade -y\n",
                "yum install python3-pip -y\n",
                "pip3 install c7n\n",
                "crontab<<EOF\n",
                "*/15 * * * * /usr/local/bin/custodian run -s /tmp /var/policies.yaml\n",
                "EOF\n",
                "aws configure set region ",
                {"Ref":"AWS::Region"},
                "\n",
                "aws s3 cp s3://",
                {"Ref":"DeployBucket"},
                "/policies.yaml",
                " /var/policies.yaml\n"
              ]
            ]
          }
        },
        "Tags" : [
          {
            "Key" : "Name",
            "Value" : {
              "Fn::Join": [
                "-",
                  [
                      "Cloud Custodian",
                      {
                          "Ref": "AWS::StackName"
                      }
                  ]
              ]
          }

        }]
      }
    },
    "CloudCustodianSG": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable SSH access via port 22 for testing",
        "VpcId": {
          "Ref": "DeployVPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "CloudCustodianEBS": {
    "Type" : "AWS::EC2::Volume",
    "Properties" : {
        "AvailabilityZone" :{
          "Fn::Select": [
              "0",
              {
                  "Fn::GetAZs" : { "Ref" : "AWS::Region" } 
              }
          ]
      },
        "Encrypted" : false,
        "Size" : 100,
        "Tags" : [
          {
            "Key" : "Name",
            "Value" : {
              "Fn::Join": [
                "-",
                  [
                      "EBS Volume",
                      {
                          "Ref": "AWS::StackName"
                      }
                  ]
              ]
          }

        }],
        "VolumeType" : "gp2"
      }
  }
},
  "Outputs": {

  }
}