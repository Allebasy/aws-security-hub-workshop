{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "This template creates the basic VPC infrastructure for an isolated testing environment. It will deploy a bastion host into the public subnet for a single Availability Zone so we have a protected point of entry. It will then create a linux instance with some red team scripts & tools that operate against common applications that are created in the same private subnet. **WARNING** This template creates Amazon EC2 instance and related resources. You will be billed for the AWS resources used if you create a stack from this template.",
    "Parameters": {
        "LatestLinuxAMI": {
            "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
            "Default": "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"
        },
        "LatestWindows2012R2AMI": {
            "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
            "Default": "/aws/service/ami-windows-latest/Windows_Server-2012-R2_RTM-English-64Bit-Base"
        },
        "InstanceSubnetId": {
            "Type": "String",
            "Description": "Id of the Subnet to launch instances into"
        },
        "DeployVPC": {
            "Type": "String",
            "Description": "Id of the VPC to launch instances into"
        },
        "DeployVPCCidr": {
            "Type": "String",
            "Description": "Cidr block of the VPC"
        }
    },
    "Resources": {
        "RedTeamNetInt": {
            "Type": "AWS::EC2::NetworkInterface",
            "Properties": {
                "SubnetId": {
                    "Ref": "InstanceSubnetId"
                },
            }
        },
        "BasicLinuxNetInt": {
            "Type": "AWS::EC2::NetworkInterface",
            "Properties": {
                "SubnetId": {
                    "Ref": "InstanceSubnetId"
                },
                "GroupSet": [
                    {
                        "Ref": "BasicLinuxSecurityGroup"
                    }
                ]
            }
        },
        "RedTeam": {
            "DependsOn": [
                "BasicLinuxTarget",
                "BasicWindowsTarget"
            ],
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "NetworkInterfaces": [
                    {
                        "NetworkInterfaceId": {
                            "Ref": "RedTeamNetInt"
                        },
                        "DeviceIndex": "0"
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "export PATH=$PATH:/usr/local/bin:/usr/sbin:/root/.local/bin\n",
                                "echo 'export PATH=/root/.local/bin:/usr/sbin:$PATH' >> /home/ec2-user/.profile\n",
                                "yum update -y\n",
                                "yum install nmap git python python2-pip python-argparse gcc gcc-c++ glib2-devel -y\n",
                                "yum install cmake openssl-devel libX11-devel libXi-devel libXtst-devel libXinerama-devel -y\n",
                                "pip install paramiko\n",
                                "export privateIP=`curl http://169.254.169.254/latest/meta-data/local-ipv4`\n",
                                "curl -L https://raw.githubusercontent.com/awslabs/amazon-guardduty-tester/master/guardduty_tester.sh > /home/ec2-user/guardduty_tester.sh\n",
                                "mkdir /home/ec2-user/compromised_keys\n",
                                "mkdir /home/ec2-user/domains\n",
                                "mkdir /home/ec2-user/passwords\n",
                                "curl -L https://raw.githubusercontent.com/awslabs/amazon-guardduty-tester/master/artifacts/queries.txt > /home/ec2-user/domains/queries.txt\n",
                                "curl -L https://raw.githubusercontent.com/awslabs/amazon-guardduty-tester/master/artifacts/password_list.txt > /home/ec2-user/passwords/password_list.txt\n",
                                "curl -L https://raw.githubusercontent.com/awslabs/amazon-guardduty-tester/master/artifacts/never_used_sample_key.foo > /home/ec2-user/compromised_keys/compromised.pem\n",
                                "FILE=\"/home/ec2-user/compromised_keys/compromised.pem\"\n",
                                "for FILE in {1..20}; do cp /home/ec2-user/compromised_keys/compromised.pem /home/ec2-user/compromised_keys/compromised$FILE.pem; done\n",
                                "echo 'BASIC_LINUX_TARGET=\"",
                                {
                                    "Fn::GetAtt": [
                                        "BasicLinuxTarget",
                                        "PrivateIp"
                                    ]
                                },
                                "\"' >> /home/ec2-user/localIps.sh\n",
                                "echo 'BASIC_WINDOWS_TARGET=\"",
                                {
                                    "Fn::GetAtt": [
                                        "BasicWindowsTarget",
                                        "PrivateIp"
                                    ]
                                },
                                "\"' >> /home/ec2-user/localIps.sh\n",
                                "echo -n 'RED_TEAM_INSTANCE=\"' >> /home/ec2-user/localIps.sh\n",
                                "wget -q -O - http://169.254.169.254/latest/meta-data/instance-id >> /home/ec2-user/localIps.sh\n",
                                "echo '\"' >> /home/ec2-user/localIps.sh\n",
                                "echo -n 'RED_TEAM_IP=\"' >> /home/ec2-user/localIps.sh\n",
                                "wget -q -O - http://169.254.169.254/latest/meta-data/local-ipv4 >> /home/ec2-user/localIps.sh\n",
                                "echo '\"' >> /home/ec2-user/localIps.sh\n",
                                "echo 'BASIC_LINUX_INSTANCE=\"",
                                {
                                    "Ref": "BasicLinuxTarget"
                                },
                                "\"' >> /home/ec2-user/localIps.sh\n",
                                "echo 'BASIC_WINDOWS_INSTANCE=\"",
                                {
                                    "Ref": "BasicWindowsTarget"
                                },
                                "\"' >> /home/ec2-user/localIps.sh\n",
                                "mkdir /home/ec2-user/FreeRDP\n",
                                "mkdir /home/ec2-user/thc-hydra\n",
                                "git clone -b \"8.3\" https://github.com/vanhauser-thc/thc-hydra /home/ec2-user/thc-hydra\n",
                                "cd /home/ec2-user/thc-hydra\n",
                                "/home/ec2-user/thc-hydra/configure\n",
                                "make\n",
                                "make install\n",
                                "git clone git://github.com/FreeRDP/FreeRDP.git /home/ec2-user/FreeRDP\n",
                                "cd /home/ec2-user/FreeRDP\n",
                                "cmake -DCMAKE_BUILD_TYPE=Debug -DWITH_SSE2=ON .\n",
                                "make install\n",
                                "echo '/usr/local/lib/freerdp' >> /etc/ld.so.conf.d/freerdp.conf\n",
                                "ln -s /usr/local/bin/xfreerdp /usr/bin/xfreerdp\n",
                                "cd /home/ec2-user\n",
                                "git clone https://github.com/galkan/crowbar /home/ec2-user/crowbar\n",
                                "chown -R ec2-user: /home/ec2-user\n",
                                "chmod +x /home/ec2-user/guardduty_tester.sh\n",
                                "chmod +x /home/ec2-user/crowbar/crowbar.py\n",
                                "sed -i 's#localIps.sh#/home/ec2-user/localIps.sh#g' /home/ec2-user/guardduty_tester.sh\n",
                                "sed -i 's#hydra#/usr/local/bin/hydra#g' /home/ec2-user/guardduty_tester.sh\n",
                                "echo 'MAILTO=' >> cron_file\n",
                                "echo '*/5 * * * * /home/ec2-user/guardduty_tester.sh >>/tmp/guardduty_tester.log' >>cron_file\n",
                                "crontab -u ec2-user cron_file\n"
                            ]
                        ]
                    }
                },
                "InstanceType": "t3.micro",
                "ImageId": {
                    "Ref": "LatestLinuxAMI"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "RedTeam"
                    }
                ]
            }
        },
        "BasicLinuxSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enables Admin Access to basic linux hosts",
                "VpcId": {
                    "Ref": "DeployVPC"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": {"Ref": "DeployVPCCidr"}
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": {"Ref": "DeployVPCCidr"}
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "5050",
                        "ToPort": "5050",
                        "CidrIp": {"Ref": "DeployVPCCidr"}
                    },
                    {
                        "IpProtocol": "icmp",
                        "FromPort": "-1",
                        "ToPort": "-1",
                        "CidrIp": {"Ref": "DeployVPCCidr"}
                    }
                ]
            }
        },
        "BasicLinuxTarget": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "NetworkInterfaces": [
                    {
                        "NetworkInterfaceId": {
                            "Ref": "BasicLinuxNetInt"
                        },
                        "DeviceIndex": "0"
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "export PATH=$PATH:/usr/local/bin\n",
                                "yum update -y\n",
                                "yum install -y httpd24 php70 mysql56-server php70-mysqlnd gcc openssl-devel* nmap\n",
                                "service httpd start\n",
                                "export LOCAL_HOST=`curl http://169.254.169.254/latest/meta-data/local-hostname`\n",
                                "wget -O /home/ec2-user/install https://d1wk0tztpsntt1.cloudfront.net/linux/latest/install\n",
                                "chmod +x /home/ec2-user/install\n",
                                "bash /home/ec2-user/install -u false\n"
                            ]
                        ]
                    }
                },
                "InstanceType": "t3.large",
                "ImageId": {
                    "Ref": "LatestLinuxAMI"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "BasicLinuxTarget"
                    }
                ]
            }
        },
        "BasicWindowsSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enables Admin Access to basic windows hosts",
                "VpcId": {
                    "Ref": "DeployVPC"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "3389",
                        "ToPort": "3389",
                        "CidrIp": {"Ref": "DeployVPCCidr"}
                    },
                    {
                        "IpProtocol": "icmp",
                        "FromPort": "-1",
                        "ToPort": "-1",
                        "CidrIp": {"Ref": "DeployVPCCidr"}
                    }
                ]
            }
        },
        "BasicWindowsTarget": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "NetworkInterfaces": [
                    {
                        "GroupSet": [
                            {
                                "Ref": "BasicWindowsSecurityGroup"
                            }
                        ],
                        "AssociatePublicIpAddress": "false",
                        "DeviceIndex": "0",
                        "DeleteOnTermination": "true",
                        "SubnetId": {
                            "Ref": "InstanceSubnetId"
                        }
                    }
                ],
                "InstanceType": "t3.large",
                "ImageId": {
                    "Ref": "LatestWindows2012R2AMI"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "BasicWindowsTarget"
                    }
                ]
            }
        }
    },
    "Outputs": {
        "RedTeamIp": {
            "Description": "Local IP for RedTeam Instance",
            "Value": {
                "Fn::GetAtt": [
                    "RedTeam",
                    "PrivateIp"
                ]
            }
        }
    }
}
